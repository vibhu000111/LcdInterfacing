
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000003e6  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800136  00800136  000004b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c89  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ad  00000000  00000000  000011f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b5  00000000  00000000  000019a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e3  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000519  00000000  00000000  00002367  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002880  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_1>
   8:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 34       	cpi	r26, 0x4C	; 76
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8b 01 	call	0x316	; 0x316 <main>
  9e:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_CMD>:
#define rs PB0
#define rw PB1
#define en PB2
void LCD_CMD(char a)
{
	char upper=(0xf0 & a);// extracting upper nibble
  a6:	98 2f       	mov	r25, r24
  a8:	90 7f       	andi	r25, 0xF0	; 240
	LCD=upper;
  aa:	9b b9       	out	0x0b, r25	; 11
	PORTB&=~(0x01<<rs);
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	9e 7f       	andi	r25, 0xFE	; 254
  b0:	95 b9       	out	0x05, r25	; 5
	PORTB&=~(0x01<<rw);
  b2:	95 b1       	in	r25, 0x05	; 5
  b4:	9d 7f       	andi	r25, 0xFD	; 253
  b6:	95 b9       	out	0x05, r25	; 5
	PORTB|=(0x01<<en);
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	94 60       	ori	r25, 0x04	; 4
  bc:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	ef e9       	ldi	r30, 0x9F	; 159
  c0:	ff e0       	ldi	r31, 0x0F	; 15
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_CMD+0x1c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_CMD+0x22>
  c8:	00 00       	nop
	_delay_ms(1);
	PORTB&=~(0x01<<en);
  ca:	95 b1       	in	r25, 0x05	; 5
  cc:	9b 7f       	andi	r25, 0xFB	; 251
  ce:	95 b9       	out	0x05, r25	; 5
	char lower=((0x0f & a)<<4);
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
	LCD=lower;
  d8:	8b b9       	out	0x0b, r24	; 11
	PORTB|=(0x01<<en);
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	85 b9       	out	0x05, r24	; 5
  e0:	8f e9       	ldi	r24, 0x9F	; 159
  e2:	9f e0       	ldi	r25, 0x0F	; 15
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_CMD+0x3e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_CMD+0x44>
  ea:	00 00       	nop
	_delay_ms(1);
	PORTB&=~(0x01<<en);
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	8b 7f       	andi	r24, 0xFB	; 251
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	08 95       	ret

000000f4 <LCD_DATA>:
}
void LCD_DATA(char d)
{
	char upper=(0xf0 & d);
  f4:	98 2f       	mov	r25, r24
  f6:	90 7f       	andi	r25, 0xF0	; 240
	LCD=upper;
  f8:	9b b9       	out	0x0b, r25	; 11
	PORTB|=(0x01<<rs);
  fa:	95 b1       	in	r25, 0x05	; 5
  fc:	91 60       	ori	r25, 0x01	; 1
  fe:	95 b9       	out	0x05, r25	; 5
	PORTB&=~(0x01<<rw);
 100:	95 b1       	in	r25, 0x05	; 5
 102:	9d 7f       	andi	r25, 0xFD	; 253
 104:	95 b9       	out	0x05, r25	; 5
	PORTB|=(0x01<<en);
 106:	95 b1       	in	r25, 0x05	; 5
 108:	94 60       	ori	r25, 0x04	; 4
 10a:	95 b9       	out	0x05, r25	; 5
 10c:	ef e9       	ldi	r30, 0x9F	; 159
 10e:	ff e0       	ldi	r31, 0x0F	; 15
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <LCD_DATA+0x1c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <LCD_DATA+0x22>
 116:	00 00       	nop
	_delay_ms(1);
	PORTB&=~(0x01<<en);
 118:	95 b1       	in	r25, 0x05	; 5
 11a:	9b 7f       	andi	r25, 0xFB	; 251
 11c:	95 b9       	out	0x05, r25	; 5
	char lower=((0x0f & d) << 4);
 11e:	f0 e1       	ldi	r31, 0x10	; 16
 120:	8f 9f       	mul	r24, r31
 122:	c0 01       	movw	r24, r0
 124:	11 24       	eor	r1, r1
	LCD=lower;
 126:	8b b9       	out	0x0b, r24	; 11
	PORTB|=(0x01<<en);
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_DATA+0x3e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_DATA+0x44>
 138:	00 00       	nop
	_delay_ms(1);
	PORTB&=~(0x01<<en);
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	8b 7f       	andi	r24, 0xFB	; 251
 13e:	85 b9       	out	0x05, r24	; 5
 140:	08 95       	ret

00000142 <displayWord>:
}
void displayWord(char *p)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
	
	while(*p!='\0')
 148:	03 c0       	rjmp	.+6      	; 0x150 <displayWord+0xe>
	{
		LCD_DATA(*p);
 14a:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_DATA>
		p=p+1;
 14e:	21 96       	adiw	r28, 0x01	; 1
	PORTB&=~(0x01<<en);
}
void displayWord(char *p)
{
	
	while(*p!='\0')
 150:	88 81       	ld	r24, Y
 152:	81 11       	cpse	r24, r1
 154:	fa cf       	rjmp	.-12     	; 0x14a <displayWord+0x8>
	{
		LCD_DATA(*p);
		p=p+1;
	}
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <LCDinit>:
void LCDinit()
{
	DDRB|=(0x01<<0)|(0x01<<1)|(0x01<<2);
 15c:	84 b1       	in	r24, 0x04	; 4
 15e:	87 60       	ori	r24, 0x07	; 7
 160:	84 b9       	out	0x04, r24	; 4
	DDRD|=(0x01<<4)|(0x01<<5)|(0x01<<6)|(0x01<<7);
 162:	8a b1       	in	r24, 0x0a	; 10
 164:	80 6f       	ori	r24, 0xF0	; 240
 166:	8a b9       	out	0x0a, r24	; 10
	LCD_CMD(0x02);
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
	LCD_CMD(0x28);
 16e:	88 e2       	ldi	r24, 0x28	; 40
 170:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
	LCD_CMD(0x0c);
 174:	8c e0       	ldi	r24, 0x0C	; 12
 176:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
	LCD_CMD(0x06);
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
	LCD_CMD(0x80);
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
 186:	08 95       	ret

00000188 <__vector_1>:
#include <avr/interrupt.h>
#include "LCD.h"
volatile int c=0;
volatile char buffer[20];
ISR(INT0_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
 LCD_CMD(0xC0);
 1aa:	80 ec       	ldi	r24, 0xC0	; 192
 1ac:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
 c=c+1;
 1b0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 1b4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
 1be:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
 itoa(c,buffer,10);
 1c2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 1c6:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
 1ca:	4a e0       	ldi	r20, 0x0A	; 10
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	68 e3       	ldi	r22, 0x38	; 56
 1d0:	71 e0       	ldi	r23, 0x01	; 1
 1d2:	0e 94 b1 01 	call	0x362	; 0x362 <itoa>
 displayWord(buffer);
 1d6:	88 e3       	ldi	r24, 0x38	; 56
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 a1 00 	call	0x142	; 0x142 <displayWord>
}
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_2>:
ISR(INT1_vect)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
	LCD_CMD(0x80);
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
	//_delay_us(1);
	displayWord("Timer Starts");
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 a1 00 	call	0x142	; 0x142 <displayWord>
	//_delay_us(1);
	for(int i=c;i>=0;i--)
 234:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <__data_end>
 238:	d0 91 37 01 	lds	r29, 0x0137	; 0x800137 <__data_end+0x1>
 23c:	26 c0       	rjmp	.+76     	; 0x28a <__vector_2+0x8a>
	{
		if(i>=10)
 23e:	ca 30       	cpi	r28, 0x0A	; 10
 240:	d1 05       	cpc	r29, r1
 242:	24 f0       	brlt	.+8      	; 0x24c <__vector_2+0x4c>
		{
		LCD_CMD(0xC0);
 244:	80 ec       	ldi	r24, 0xC0	; 192
 246:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
 24a:	0a c0       	rjmp	.+20     	; 0x260 <__vector_2+0x60>
		}
		else
		{
			LCD_CMD(0xC0);
 24c:	80 ec       	ldi	r24, 0xC0	; 192
 24e:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
			displayWord("0");
 252:	8d e0       	ldi	r24, 0x0D	; 13
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 a1 00 	call	0x142	; 0x142 <displayWord>
		LCD_CMD(0xC1);	
 25a:	81 ec       	ldi	r24, 0xC1	; 193
 25c:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
		}
		itoa(i,buffer,10);
 260:	4a e0       	ldi	r20, 0x0A	; 10
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	68 e3       	ldi	r22, 0x38	; 56
 266:	71 e0       	ldi	r23, 0x01	; 1
 268:	ce 01       	movw	r24, r28
 26a:	0e 94 b1 01 	call	0x362	; 0x362 <itoa>
		displayWord(buffer);
 26e:	88 e3       	ldi	r24, 0x38	; 56
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 a1 00 	call	0x142	; 0x142 <displayWord>
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	83 ed       	ldi	r24, 0xD3	; 211
 27a:	90 e3       	ldi	r25, 0x30	; 48
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <__vector_2+0x7c>
 284:	00 c0       	rjmp	.+0      	; 0x286 <__vector_2+0x86>
 286:	00 00       	nop
{
	LCD_CMD(0x80);
	//_delay_us(1);
	displayWord("Timer Starts");
	//_delay_us(1);
	for(int i=c;i>=0;i--)
 288:	21 97       	sbiw	r28, 0x01	; 1
 28a:	dd 23       	and	r29, r29
 28c:	c4 f6       	brge	.-80     	; 0x23e <__vector_2+0x3e>
		}
		itoa(i,buffer,10);
		displayWord(buffer);
		_delay_ms(1000);
	}
	c=0;
 28e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0x1>
 292:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
	PORTB|=_BV(PORTB3);
 296:	85 b1       	in	r24, 0x05	; 5
 298:	88 60       	ori	r24, 0x08	; 8
 29a:	85 b9       	out	0x05, r24	; 5
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	83 ed       	ldi	r24, 0xD3	; 211
 2a0:	90 e3       	ldi	r25, 0x30	; 48
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <__vector_2+0xa2>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <__vector_2+0xac>
 2ac:	00 00       	nop
	_delay_ms(1000);
	PORTB&=~(_BV(PORTB3));
 2ae:	85 b1       	in	r24, 0x05	; 5
 2b0:	87 7f       	andi	r24, 0xF7	; 247
 2b2:	85 b9       	out	0x05, r24	; 5
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	83 ed       	ldi	r24, 0xD3	; 211
 2b8:	90 e3       	ldi	r25, 0x30	; 48
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <__vector_2+0xba>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <__vector_2+0xc4>
 2c4:	00 00       	nop
	_delay_ms(1000);
	LCD_CMD(0xC0);
 2c6:	80 ec       	ldi	r24, 0xC0	; 192
 2c8:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
	displayWord("                ");
 2cc:	8f e0       	ldi	r24, 0x0F	; 15
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 a1 00 	call	0x142	; 0x142 <displayWord>
	//_delay_us(1);
	LCD_CMD(0x80);
 2d4:	80 e8       	ldi	r24, 0x80	; 128
 2d6:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
	//_delay_us(1);
	displayWord("                ");
 2da:	8f e0       	ldi	r24, 0x0F	; 15
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 a1 00 	call	0x142	; 0x142 <displayWord>
	//_delay_us(1);
	LCD_CMD(0x80);
 2e2:	80 e8       	ldi	r24, 0x80	; 128
 2e4:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
	//_delay_us(1);
	displayWord("Enter Time");
 2e8:	80 e2       	ldi	r24, 0x20	; 32
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 a1 00 	call	0x142	; 0x142 <displayWord>
}
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <main>:
int main(void)
{
	/* Replace with your application code */
	DDRB|=_BV(DDB3)|_BV(DDB4);
 316:	84 b1       	in	r24, 0x04	; 4
 318:	88 61       	ori	r24, 0x18	; 24
 31a:	84 b9       	out	0x04, r24	; 4
	LCDinit();
 31c:	0e 94 ae 00 	call	0x15c	; 0x15c <LCDinit>
	//_delay_us(3);
	displayWord("enter time");
 320:	8b e2       	ldi	r24, 0x2B	; 43
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 a1 00 	call	0x142	; 0x142 <displayWord>
	//_delay_us(5);
	LCD_CMD(0xC0);
 328:	80 ec       	ldi	r24, 0xC0	; 192
 32a:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_CMD>
	//_delay_us(1);
	EICRA|=_BV(ISC11)|_BV(ISC01);
 32e:	e9 e6       	ldi	r30, 0x69	; 105
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	8a 60       	ori	r24, 0x0A	; 10
 336:	80 83       	st	Z, r24
	EICRA&=~((0x01<<2)|(0x01<<0));
 338:	80 81       	ld	r24, Z
 33a:	8a 7f       	andi	r24, 0xFA	; 250
 33c:	80 83       	st	Z, r24
	EIMSK|=_BV(INT1)|_BV(INT0);
 33e:	8d b3       	in	r24, 0x1d	; 29
 340:	83 60       	ori	r24, 0x03	; 3
 342:	8d bb       	out	0x1d, r24	; 29
	sei();
 344:	78 94       	sei
	while (1)
	{
		PORTB^=_BV(PORTB4);
 346:	95 b1       	in	r25, 0x05	; 5
 348:	80 e1       	ldi	r24, 0x10	; 16
 34a:	89 27       	eor	r24, r25
 34c:	85 b9       	out	0x05, r24	; 5
 34e:	2f ef       	ldi	r18, 0xFF	; 255
 350:	83 ec       	ldi	r24, 0xC3	; 195
 352:	99 e0       	ldi	r25, 0x09	; 9
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0x3e>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x48>
 35e:	00 00       	nop
 360:	f2 cf       	rjmp	.-28     	; 0x346 <main+0x30>

00000362 <itoa>:
 362:	45 32       	cpi	r20, 0x25	; 37
 364:	51 05       	cpc	r21, r1
 366:	20 f4       	brcc	.+8      	; 0x370 <itoa+0xe>
 368:	42 30       	cpi	r20, 0x02	; 2
 36a:	10 f0       	brcs	.+4      	; 0x370 <itoa+0xe>
 36c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__itoa_ncheck>
 370:	fb 01       	movw	r30, r22
 372:	10 82       	st	Z, r1
 374:	cb 01       	movw	r24, r22
 376:	08 95       	ret

00000378 <__itoa_ncheck>:
 378:	bb 27       	eor	r27, r27
 37a:	4a 30       	cpi	r20, 0x0A	; 10
 37c:	31 f4       	brne	.+12     	; 0x38a <__itoa_ncheck+0x12>
 37e:	99 23       	and	r25, r25
 380:	22 f4       	brpl	.+8      	; 0x38a <__itoa_ncheck+0x12>
 382:	bd e2       	ldi	r27, 0x2D	; 45
 384:	90 95       	com	r25
 386:	81 95       	neg	r24
 388:	9f 4f       	sbci	r25, 0xFF	; 255
 38a:	0c 94 c8 01 	jmp	0x390	; 0x390 <__utoa_common>

0000038e <__utoa_ncheck>:
 38e:	bb 27       	eor	r27, r27

00000390 <__utoa_common>:
 390:	fb 01       	movw	r30, r22
 392:	55 27       	eor	r21, r21
 394:	aa 27       	eor	r26, r26
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	aa 1f       	adc	r26, r26
 39c:	a4 17       	cp	r26, r20
 39e:	10 f0       	brcs	.+4      	; 0x3a4 <__utoa_common+0x14>
 3a0:	a4 1b       	sub	r26, r20
 3a2:	83 95       	inc	r24
 3a4:	50 51       	subi	r21, 0x10	; 16
 3a6:	b9 f7       	brne	.-18     	; 0x396 <__utoa_common+0x6>
 3a8:	a0 5d       	subi	r26, 0xD0	; 208
 3aa:	aa 33       	cpi	r26, 0x3A	; 58
 3ac:	08 f0       	brcs	.+2      	; 0x3b0 <__utoa_common+0x20>
 3ae:	a9 5d       	subi	r26, 0xD9	; 217
 3b0:	a1 93       	st	Z+, r26
 3b2:	00 97       	sbiw	r24, 0x00	; 0
 3b4:	79 f7       	brne	.-34     	; 0x394 <__utoa_common+0x4>
 3b6:	b1 11       	cpse	r27, r1
 3b8:	b1 93       	st	Z+, r27
 3ba:	11 92       	st	Z+, r1
 3bc:	cb 01       	movw	r24, r22
 3be:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <strrev>

000003c2 <strrev>:
 3c2:	dc 01       	movw	r26, r24
 3c4:	fc 01       	movw	r30, r24
 3c6:	67 2f       	mov	r22, r23
 3c8:	71 91       	ld	r23, Z+
 3ca:	77 23       	and	r23, r23
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <strrev+0x4>
 3ce:	32 97       	sbiw	r30, 0x02	; 2
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <strrev+0x18>
 3d2:	7c 91       	ld	r23, X
 3d4:	6d 93       	st	X+, r22
 3d6:	70 83       	st	Z, r23
 3d8:	62 91       	ld	r22, -Z
 3da:	ae 17       	cp	r26, r30
 3dc:	bf 07       	cpc	r27, r31
 3de:	c8 f3       	brcs	.-14     	; 0x3d2 <strrev+0x10>
 3e0:	08 95       	ret

000003e2 <_exit>:
 3e2:	f8 94       	cli

000003e4 <__stop_program>:
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <__stop_program>
